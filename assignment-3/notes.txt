Notes:
Write 2 separte programs.
Program 1 - CPU scheduling and FIFOs
Program 2 - Deadlock detection and Signal

prg_1

2 threads in prg_1
Thread 1 
- Do Shortest-remaining -time-first
- Determine average waiting time and turn-around time
- Write awt and tat to CPU memory using FIFOs

Thread 2
- Read from memory
- Output to textfile "output.txt"


prg_2
Detect deadlock -> report it

Read information from "Topic2_Prg_2.txt" file
Do deadlock detection algorithm LOL
Print process ID of deadlocks
Write result to "output_topic2.txt" (notify user when writing complete)

Extra: Get program to generate Gantt-chart on console loool




------------------------
prg_1
step 1 
- Create threads
- Test threads

step 2
- do srtf
How to SRTF
- Start with process that arrives first
- if new process > current process
-- start new process
- else
-- continue with current process


        Process ID      Arrival Time    Burst Time      Wait Time       Turnaround Time
        1               0.000000        8.000000        0.000000        0.000000
        2               1.000000        4.000000        0.000000        0.000000
        3               2.000000        9.000000        0.000000        4.000000
        4               3.000000        5.000000        1.000000        6.000000
 
Wait time if SRTF
Start = P1 arrival = 0
Wait time_P1 = start = 0
-> Run P1 till next arrival time
-> compare P1 vs P2 
P1 current bust = (P1 total bust - P2 arrival) = 8 - 1 = 7
P2 = 4
P1>P2

Start = P2 arrival = 1
Wait time P2 = start - ? = 1
-> run P2 till next arrival time 
-> compares P2 vs P3
P2 current burst = (p2 total burst -P2 arrival) = 4-1 = 3
P3 = 9
P2 > P3




---
Learned
-> is a shorthand for (*x).field, where x is a pointer to a variable of type struct account, and field is a field in the struct, such as account_number.

If you have a pointer to a struct, then saying
accountp->account_number;

is much more concise than
(*accountp).account_number;

-------------
Problem
Changed the way of implementating threads. 
-> threads not running properly
-> possible solution - needa pass to init
-> got segmentation fault
-- had to pass everything through in main..
